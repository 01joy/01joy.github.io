<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on bitJoy</title>
    <link>http://localhost:1313/tags/linux/</link>
    <description>Recent content in Linux on bitJoy</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Tue, 07 Feb 2017 19:15:56 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux性能分析工具简介</title>
      <link>http://localhost:1313/posts/2017-02-07-introduction-to-performance-analysis-tools-in-linux/</link>
      <pubDate>Tue, 07 Feb 2017 19:15:56 +0800</pubDate>
      <guid>http://localhost:1313/posts/2017-02-07-introduction-to-performance-analysis-tools-in-linux/</guid>
      <description>&lt;p&gt;这半年一直在研究pLink 2的加速策略，了解了相关的性能分析工具，现记录如下。&lt;/p&gt;
&lt;p&gt;对软件进行加速的技术路线一般为：首先对代码进行性能分析（ performance analysis，也称为 profiling），然后针对性能瓶颈提出优化方案，最后在大数据集上评测加速效果。所以进行性能优化的前提就是准确地测量代码中各个模块的时间消耗。听起来很简单，不就是测量每行代码的运行时间吗，直接用time_t t=clock();不就好了，但是事情并没有那么简单。如果只进行粗粒度的性能分析，比如测量几个大的模块的运行时间，clock()还比较准确，但是如果测量的是运算量比较小的函数调用，而且有大量的小函数调用，clock()就不太准确了。&lt;/p&gt;
&lt;p&gt;比如下面的一段代码，我最开始的性能分析方法是在fun1()~fun3()前后添加time_t t=clock()，然后作差求和的。但是3个fun()加起来的时间居然不等于整个while循环的时间，有将近50%的时间不翼而飞了！&lt;/p&gt;
&lt;p&gt;[cpp]
while(true) {
if(fun1()) {
for(int i=0;i&amp;lt;k;++k) {
if(flag1) {
fun2();
}
}
} else {
fun3();
}
}
[/cpp]&lt;/p&gt;
&lt;p&gt;一种可能是while循环以及内部的for循环本身占用了较多的时间，但是好像不太可能呀。还有一种可能是clock()测量有误，time_t只能精确到秒，clock_t只能精确到毫秒，如果一次fun*()的时间太短，导致一次测量几乎为0，那么多次的while和for循环调用累加的时间也几乎为0，导致实际测量到的fun*()时间远小于真实时间。所以自己用代码进行性能分析可能会有较大的误差，最好借助已有的性能分析工具。&lt;/p&gt;
&lt;p&gt;性能分析和操作系统有较大的关系。因为C++11以前的多线程在不同操作系统中有不同的实现，比如在Windows中使用的是Win32 threads，需要包含windows.h头文件，在Linux中使用的是POSIX Threads，需要包含pthread.h头文件，所以选择性能分析工具首先需要看代码使用的多线程是哪个版本。如果使用的是Win32 threads，则需要在Windows平台选择热点分析工具；如果使用的是POSIX Threads，则需要在Linux平台选择热点分析工具；当然，如果代码中没有多线程或者采用的多线程是C++11标准统一的多线程，原则上可以忽略操作系统的限制。&lt;/p&gt;
&lt;p&gt;Windows平台上，之前用过微软的Visual Studio工具进行Profiling，效果很不错，网上的介绍也很多，这里就不详细介绍了。&lt;/p&gt;
&lt;p&gt;通过网络搜索我发现了三款Linux平台下主流的热点分析工具，分别是GNU gprof、Valgrind和Google perftools，三款工具的主要特点如下表：&lt;/p&gt;
&lt;p&gt;工具	使用命令	是否需要重新编译	Profiling速度	是否支持多线程热点分析	是否支持链接库热点分析
GNU gprof	./test; gprof ./test ./gmon.out	是	慢	否	否
Valgrind	Valgrind –tool=callgrind ./test	否	非常慢	是	是
Google perftools	LD_PRELOAD=/usr/lib/libprofiler.so CPUPROFILE=./test.prof ./test	否	快	是	是
GNU gprof是GNU G++自带的热点分析工具，使用方法是：1. 使用-pg选项重新编译代码；2. 执行程序./test，生成热点分析结果gmont.out；3.使用gprof查看结果gprof ./test ./gmon.out。因为gprof要求用-pg重新编译代码，需要在Debug模式下进行Profiling，所以速度较慢。另外gprof不支持多线程的热点分析。这个工具另一个大问题是，不支持链接库的热点分析。很多大型项目为了模块化管理会生成很多动态链接库供其他程序调用，如果要分析每个模块的热点，这个工具就不适用了。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
