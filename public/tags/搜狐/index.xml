<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>搜狐 on bitJoy</title>
    <link>http://localhost:1313/tags/%E6%90%9C%E7%8B%90/</link>
    <description>Recent content in 搜狐 on bitJoy</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Mon, 04 Jan 2016 16:23:19 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E6%90%9C%E7%8B%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>和我一起构建搜索引擎（二）网络爬虫</title>
      <link>http://localhost:1313/posts/2016-01-04-introduction-to-building-a-search-engine-2/</link>
      <pubDate>Mon, 04 Jan 2016 16:23:19 +0800</pubDate>
      <guid>http://localhost:1313/posts/2016-01-04-introduction-to-building-a-search-engine-2/</guid>
      <description>&lt;p&gt;网络爬虫又称网络蜘蛛、Web采集器等，它是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。&lt;/p&gt;
&lt;p&gt;我们在设计网络爬虫的时候需要注意两点：&lt;/p&gt;
&lt;p&gt;鲁棒性。Web中有些服务器会制造采集器陷阱（spider traps），这些陷阱服务器实际上是Web页面的生成器，它能在某个域下生成无数网页，从而使采集器陷入到一个无限的采集循环中去。采集器必须能从这些陷阱中跳出来。当然，这些陷阱倒不一定都是恶意的，有时可能是网站设计疏忽所导致的结果。&lt;/p&gt;
&lt;p&gt;礼貌性。Web服务器具有一些隐式或显式的政策来控制采集器访问它们的频率。设计采集器时必须要遵守这些代表礼貌性的访问政策。&lt;/p&gt;
&lt;p&gt;采集器的基本架构如下图所示。&lt;/p&gt;
&lt;p&gt;the basic crawler architecture&lt;/p&gt;
&lt;p&gt;基本上是“抓取→分析→得到新的URL→再抓取→再分析”这样一个死循环过程。&lt;/p&gt;
&lt;p&gt;以上内容摘自王斌老师翻译的《信息检索导论》课本。&lt;/p&gt;
&lt;p&gt;由于我们要做的是一个新闻搜索引擎，所以抓取的是新闻数据，对于爬虫，网上也有很多的开源程序，如nutch等，Github上还有人专门开发了抓取新闻的组件newspaper，可以很方便的提取新闻标题、正文、时间等信息。不过用python写爬虫也是分分钟的事情，下面我们一起来试一试。&lt;/p&gt;
&lt;p&gt;首先找一个新闻网站，为简单起见，要找那种结构清晰、html代码便于解析的门户网站，比如搜狐新闻、参考消息等。&lt;/p&gt;
&lt;p&gt;搜狐新闻的国内要闻列表如下：&lt;/p&gt;
&lt;p&gt;sohu news1&lt;/p&gt;
&lt;p&gt;结构非常清楚，左边是带URL的标题，右边括号里有新闻时间。这一页列表就有200条新闻，如果我们要获取1000条，只要不断模拟点击下一页即可。下一页的URL也只是在首页的基础上加上_xxx.shtml，xxx就是不同的页码。&lt;/p&gt;
&lt;p&gt;查看列表的html源码，得知列表都在类名为newsblue1的td中，所以只需要解析html源码就可以得到新闻标题、URL和时间，python解析html可以用BeautifulSoup包，非常方便。&lt;/p&gt;
&lt;p&gt;进入到新闻详细页面，正文部分如下：&lt;/p&gt;
&lt;p&gt;sohu news2&lt;/p&gt;
&lt;p&gt;查看html源码，正文位于类名为text clear的div中，据此可以很方便的提取新闻正文。&lt;/p&gt;
&lt;p&gt;得到一条新闻的所有数据之后，我们需要将之结构化成xml文件，借助相应的xml包可以很方便的完成这项工作。xml格式定义如下：&lt;/p&gt;
&lt;p&gt;xml format&lt;/p&gt;
&lt;p&gt;注意爬虫需要访问网络，难免会出现一些异常，所以捕获异常是非常有必要的。另外，搜狐每篇新闻正文后面都会有一段’//’开始的注释，这个需要过滤掉，短于140个字的新闻我也过滤掉了。整个搜索系统的配置参数都存储在config.ini文件中。&lt;/p&gt;
&lt;p&gt;下面是完整的python 3.4+代码。&lt;/p&gt;
&lt;p&gt;[python]&lt;/p&gt;
&lt;h1 id=&#34;---coding-utf-8---&#34;&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;p&gt;&amp;quot;&amp;quot;&amp;quot;
Created on Sat Dec 19 11:57:01 2015&lt;/p&gt;
&lt;p&gt;@author: bitjoy.net
&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;
&lt;p&gt;from bs4 import BeautifulSoup
import urllib.request
import xml.etree.ElementTree as ET
import configparser&lt;/p&gt;
&lt;p&gt;def get_news_pool(root, start, end):
news_pool = []
for i in range(start,end,-1):
page_url = ”
if i != start:
page_url = root +’&lt;em&gt;%d.shtml’%(i)
else:
page_url = root + ‘.shtml’
try:
response = urllib.request.urlopen(page_url)
except Exception as e:
print(&amp;quot;—–%s: %s—–&amp;quot;%(type(e), page_url))
continue
html = response.read()
soup = BeautifulSoup(html)
td = soup.find(‘td’, class&lt;/em&gt; = &amp;ldquo;newsblue1&amp;rdquo;)
a = td.find_all(‘a’)
span = td.find_all(‘span’)
for i in range(len(a)):
date_time = span[i].string
url = a[i].get(‘href’)
title = a[i].string
news_info = [‘2016-‘+date_time[1:3]+’-‘+date_time[4:-1]+’:00′,url,title]
news_pool.append(news_info)
return(news_pool)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
