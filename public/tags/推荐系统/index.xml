<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>推荐系统 on bitJoy</title>
    <link>http://localhost:1313/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 推荐系统 on bitJoy</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Sat, 09 Jan 2016 22:34:56 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>和我一起构建搜索引擎（五）推荐阅读</title>
      <link>http://localhost:1313/posts/2016-01-09-introduction-to-building-a-search-engine-5/</link>
      <pubDate>Sat, 09 Jan 2016 22:34:56 +0800</pubDate>
      <guid>http://localhost:1313/posts/2016-01-09-introduction-to-building-a-search-engine-5/</guid>
      <description>&lt;p&gt;虽然主要的检索功能实现了，但是我们还需要一个“推荐阅读”的功能。当用户浏览某条具体新闻时，我们在页面底端给出5条和该新闻相关的新闻，也就是一个最简单的推荐系统。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;搜狐新闻“相关新闻”模块&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/posts/2016-01-09-introduction-to-building-a-search-engine-5/sohu-news3.webp&#34;&gt;
搜狐新闻“相关新闻”模块&lt;/p&gt;
&lt;p&gt;推荐模块的思路是度量两两新闻之间的相似度，取相似度最高的前5篇新闻作为推荐阅读的新闻。&lt;/p&gt;
&lt;p&gt;我们前面讲过，一篇文档可以用一个向量表示，向量中的每个值是不同词项t在该文档d中的词频tf。但是一篇较短的文档（如新闻）的关键词并不多，所以我们可以提取每篇新闻的关键词，用这些关键词的tfidf值构成文档的向量表示，这样能够大大减少相似度计算量，同时保持较好的推荐效果。&lt;/p&gt;
&lt;p&gt;jieba分词组件自带关键词提取功能，并能返回关键词的tfidf值。所以对每篇新闻，我们先提取tfidf得分最高的前25个关键词，用这25个关键词的tfidf值作为文档的向量表示。由此能够得到一个1000*m的文档词项矩阵M，矩阵每行表示一个文档，每列表示一个词项，m为1000个文档的所有互异的关键词（大概10000个）。矩阵M当然也是稀疏矩阵。&lt;/p&gt;
&lt;p&gt;得到文档词项矩阵M之后，我们利用sklearn的pairwise_distances函数计算M中行向量之间的cosine相似度，对每个文档，得到与其最相似的前5篇新闻id，并把结果写入数据库。&lt;/p&gt;
&lt;p&gt;推荐阅读模块的代码如下：&lt;/p&gt;
&lt;p&gt;[python]&lt;/p&gt;
&lt;h1 id=&#34;---coding-utf-8---&#34;&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;p&gt;&amp;quot;&amp;quot;&amp;quot;
Created on Wed Dec 23 14:06:10 2015&lt;/p&gt;
&lt;p&gt;@author: bitjoy.net
&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;
&lt;p&gt;from os import listdir
import xml.etree.ElementTree as ET
import jieba
import jieba.analyse
import sqlite3
import configparser
from datetime import *
import math&lt;/p&gt;
&lt;p&gt;import pandas as pd
import numpy as np&lt;/p&gt;
&lt;p&gt;from sklearn.metrics import pairwise_distances&lt;/p&gt;
&lt;p&gt;class RecommendationModule:
stop_words = set()
k_nearest = []&lt;/p&gt;
&lt;p&gt;config_path = ”
config_encoding = ”&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
