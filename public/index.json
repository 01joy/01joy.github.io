[{"content":"博客数据恢复中，敬请期待！\n测试图片： 测试代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 // Necessary header files for input output functions #include \u0026lt;iostream\u0026gt; using namespace std; // main() function: where the execution of // C++ program begins int main() { // This statement prints \u0026#34;Hello World\u0026#34; cout \u0026lt;\u0026lt; \u0026#34;Hello World\u0026#34;; return 0; } 测试数学公式： This is an inline \\(a^*=x-b^*\\) equation.\nThese are block equations:\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$","permalink":"http://localhost:1313/posts/2025-08-15-announcement/","summary":"\u003cp\u003e博客数据恢复中，敬请期待！\u003c/p\u003e\n\u003cp\u003e测试图片：\n\u003cimg alt=\"这是图片\" loading=\"lazy\" src=\"/posts/2025-08-15-announcement/myimg.png\"\u003e\u003c/p\u003e\n\u003cp\u003e测试代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Necessary header files for input output functions\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// main() function: where the execution of\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// C++ program begins\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// This statement prints \u0026#34;Hello World\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello World\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e测试数学公式：\nThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e","title":"公告"},{"content":"这是我的个人博客，数据恢复中\u0026hellip;\n欢迎评论，如需私信请联系: bitjoy@163.com\n","permalink":"http://localhost:1313/about/","summary":"\u003cp\u003e这是我的个人博客，数据恢复中\u0026hellip;\u003c/p\u003e\n\u003cp\u003e欢迎评论，如需私信请联系: \u003ca href=\"mailto:bitjoy@163.com\"\u003ebitjoy@163.com\u003c/a\u003e\u003c/p\u003e","title":"关于"},{"content":"在上一题POJ Problem 1837: Balance中，我们曾讲到，如果只有两个挂钩，问题会好办得多，就拿题目给的样例数据来说：\nSample Input 2 4 -2 3 3 4 5 8 Sample Output 2 如上图所示，给定重量为3,4,5,8的砝码，放在一个左右臂长分别为2和3的天平上，要使天平平衡，问有多少种方法。\n这个问题可以稍加转换，假设放在左边的重量为x，右边为y，则有如下方程组成立：\n$$ \\begin{cases} x+y=3+4+5+8=20\\\\ 2x=3y \\end{cases} $$马上解出x=12,y=8。这样就相当于把原问题转换为：已知序列3,4,5,8，问从中取若干个数使和为12（或8）的方案数有多少个？ 因为取出数字和为8，则剩余和为12，所以和为8和12的方案数是相等的。\n因为这里只有4个数字，一眼就能看出有(3,4,5)，(4,8)能使和为12，即只有两种方案。如果给的数字较多较大，该怎样写代码求出呢？可以使用动态规划求解。\n设dp[i][j]表示从前i个数中选若干个数使得和为j的方案数，则我们可以得到这样的状态转换方程：\n$$ \\begin{cases} dp[i][j]=1\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\text{if}i=0\\\u0026\\\u0026j=0\\\\ dp[i][j]=dp[i-1][j]\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\text{if}w[i]\u003ej\\\\ dp[i][j]=dp[i-1][j]+dp[i-1][j-w[i]]\\qquad\\quad\\text{if}w[i]\u003c=j \\end{cases} $$ 当i=0\u0026amp;\u0026amp;j=0时，dp[i][j]=1表示从0个数中取若干个数使得和为0，当然只有1种方案，那就是什么都不取 当w[i]\u0026gt;j时，第i个数用不上，因为你单个数字都超过j了，怎么使和为j呢，所以直接dp[i][j]=dp[i-1][j] 当w[i]\u0026lt;=j时，第i个数可以用了，这个时候分两种情况，用或者不用第i个数，如果不用，则和w[i]\u0026gt;j时一样dp[i][j]=dp[i-1][j]，如果用的话，则要从前i-1个数中取若干个数使和为j-w[i]，也就是dp[i-1][j-w[i]]，这样总的方案数就是用和不用第i个数的方案数之和，即dp[i][j]=dp[i-1][j]+dp[i-1][j-w[i]] 下面是针对这个例子我手算的一个图：\n以上面的内容设计一个OJ题如下：\n描述： 给定一个正整数数字序列，从中取出若干个数字，使得这些数字之和为某一个特定的值，求所有取法的方案数。 输入： 输入包含多个测试用例，每个测试用例的第一行有两个数N,S，N表示这个数字序列共有多少个数字；S表示取出的数字之和为S。后面一行包含N个正整数。 N,S为0程序结束 输出： 每个测试用例输出一行，表示从N个数中取若干个数使得和为S的方案总数。 样例输入： 4 8 3 4 5 8 4 12 3 4 5 8 10 10 10 9 8 7 6 5 4 3 2 1 0 0 样例输出： 2 2 10 知道了状态转换方程，我们可以很快的写出以上OJ的代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include \u0026lt;algorithm\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; int main() { int n, s, sum; while (cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; s \u0026amp;\u0026amp; n \u0026amp;\u0026amp; s) { vector\u0026lt;int\u0026gt; w(n + 1); vector\u0026lt;int\u0026gt; dp(s + 1, 0); sum = 0; w[0] = 0; /* 额外添加的第0个数字为0 */ for (int i = 1; i \u0026lt;= n; i++) { cin \u0026gt;\u0026gt; w[i]; sum += w[i]; /* 所有数字之和 */ } if (sum \u0026lt; s) /* 如果所有数字加起来都小于s，则怎么取都不存在和为s的方案 */ { cout \u0026lt;\u0026lt; \u0026#34;0\u0026#34; \u0026lt;\u0026lt; endl; continue; } sort(w.begin(), w.end()); /* 首先对这些数字从小到大排序，因为取大的数字的时候会用到取小的数字的结果 */ dp[0] = 1; /* 相当于dp[0][0]=1; */ for (int i = 1; i \u0026lt;= n; i++) { for (int j = s; j \u0026gt;= 1; j – ) /* 从后往前测试，这样只需要一行空间 */ { if (w[i] \u0026lt;= j) dp[j] += dp[j - w[i]]; } } cout \u0026lt;\u0026lt; dp[s] \u0026lt;\u0026lt; endl; } return (0); } 代码中添加了几个操作，首先如果所有数字之和都小于s，则肯定无解；其次，我们先对数字序列从小到大排序，这样DP填表；最后我们填表的时候是从右往左填的，这样只需要一行空间dp[j]，而不是二维dp[i][j]。\n","permalink":"http://localhost:1313/posts/2014-11-15-subset-sum-problem/","summary":"\u003cp\u003e在上一题POJ Problem 1837: Balance中，我们曾讲到，如果只有两个挂钩，问题会好办得多，就拿题目给的样例数据来说：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eSample Input\n2 4\n-2 3\n3 4 5 8\n\nSample Output\n2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg alt=\"number-balance.png\" loading=\"lazy\" src=\"/posts/2014-11-15-subset-sum-problem/number-balance.png\"\u003e\n如上图所示，给定重量为3,4,5,8的砝码，放在一个左右臂长分别为2和3的天平上，要使天平平衡，问有多少种方法。\u003c/p\u003e\n\u003cp\u003e这个问题可以稍加转换，假设放在左边的重量为x，右边为y，则有如下方程组成立：\u003c/p\u003e\n$$\n\\begin{cases}\nx+y=3+4+5+8=20\\\\\n2x=3y\n\\end{cases}\n$$\u003cp\u003e马上解出x=12,y=8。这样就相当于把原问题转换为：\u003cstrong\u003e已知序列3,4,5,8，问从中取若干个数使和为12（或8）的方案数有多少个？\u003c/strong\u003e 因为取出数字和为8，则剩余和为12，所以和为8和12的方案数是相等的。\u003c/p\u003e\n\u003cp\u003e因为这里只有4个数字，一眼就能看出有(3,4,5)，(4,8)能使和为12，即只有两种方案。如果给的数字较多较大，该怎样写代码求出呢？可以使用动态规划求解。\u003c/p\u003e\n\u003cp\u003e设dp[i][j]表示从前i个数中选若干个数使得和为j的方案数，则我们可以得到这样的状态转换方程：\u003c/p\u003e\n$$\n\\begin{cases}\ndp[i][j]=1\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\text{if}i=0\\\u0026\\\u0026j=0\\\\\ndp[i][j]=dp[i-1][j]\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\text{if}w[i]\u003ej\\\\\ndp[i][j]=dp[i-1][j]+dp[i-1][j-w[i]]\\qquad\\quad\\text{if}w[i]\u003c=j\n\\end{cases}\n$$\u003col\u003e\n\u003cli\u003e当i=0\u0026amp;\u0026amp;j=0时，dp[i][j]=1表示从0个数中取若干个数使得和为0，当然只有1种方案，那就是什么都不取\u003c/li\u003e\n\u003cli\u003e当w[i]\u0026gt;j时，第i个数用不上，因为你单个数字都超过j了，怎么使和为j呢，所以直接dp[i][j]=dp[i-1][j]\u003c/li\u003e\n\u003cli\u003e当w[i]\u0026lt;=j时，第i个数可以用了，这个时候分两种情况，用或者不用第i个数，如果不用，则和w[i]\u0026gt;j时一样dp[i][j]=dp[i-1][j]，如果用的话，则要从前i-1个数中取若干个数使和为j-w[i]，也就是dp[i-1][j-w[i]]，这样总的方案数就是用和不用第i个数的方案数之和，即dp[i][j]=dp[i-1][j]+dp[i-1][j-w[i]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e下面是针对这个例子我手算的一个图：\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"20141115_170507.jpg\" loading=\"lazy\" src=\"/posts/2014-11-15-subset-sum-problem/20141115_170507.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e以上面的内容设计一个OJ题如下：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e描述：\n给定一个正整数数字序列，从中取出若干个数字，使得这些数字之和为某一个特定的值，求所有取法的方案数。\n\n输入：\n输入包含多个测试用例，每个测试用例的第一行有两个数N,S，N表示这个数字序列共有多少个数字；S表示取出的数字之和为S。后面一行包含N个正整数。\nN,S为0程序结束\n\n输出：\n每个测试用例输出一行，表示从N个数中取若干个数使得和为S的方案总数。\n\n样例输入：\n4 8\n3 4 5 8\n4 12\n3 4 5 8\n10 10\n10 9 8 7 6 5 4 3 2 1\n0 0\n\n样例输出：\n2\n2\n10\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e知道了状态转换方程，我们可以很快的写出以上OJ的代码：\u003c/p\u003e","title":"从一个数字序列中取若干个数字使得和为某个数，问共有多少种取数方案？"},{"content":"一、第一次使用Github的步骤： 在这个页面中填写Repo名称 不要勾选Initialize this repository with a README 点击Create repository 在本地使用Git命令行工具进入到和第1步填写Repo相同名称的文件夹中（此文件夹中已包含你要push到Github上的内容），执行以下几个命令： 1 2 3 4 5 6 git init touch README.md #optional git add . git commit -m \u0026#39;your comment\u0026#39; git remote add origin https://github.com/UserName/RepoName git push origin master 如果你在第2步中勾选了Initialize this repository with a README，那么在第4步中省略touch README.md并且在git add .之前，执行第5行代码，然后git pull origin master将远端（remote）的内容pull到本地 关于Git命令中的fetch和pull的区别，请看这篇博文 关于Git bash和Github的连接，请看这篇博文 二、Git命令中fetch和pull的区别（转载） Git中从远程的分支获取最新的版本到本地有这样2个命令：\ngit fetch：相当于是从远程获取最新版本到本地，不会自动merge 1 2 3 git fetch origin master git log -p master..origin/master git merge origin/master 以上命令的含义：首先从远程的origin的master主分支下载最新的版本到origin/master分支上，然后比较本地的master分支和origin/master分支的差别，最后进行合并。\n上述过程其实可以用以下更清晰的方式来进行：\n1 2 3 git fetch origin master:tmp git diff tmp git merge tmp 从远程获取最新的版本到本地的test分支上，之后再进行比较合并。\ngit pull：相当于是从远程获取最新版本并merge到本地 1 git pull origin master 上述命令其实相当于git fetch + git merge。\n在实际使用中，git fetch更安全一些，因为在merge前，我们可以查看更新情况，然后再决定是否合并。\n","permalink":"http://localhost:1313/posts/2014-11-11-git-notes/","summary":"\u003ch1 id=\"一第一次使用github的步骤\"\u003e一、第一次使用Github的步骤：\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e在\u003ca href=\"https://github.com/new\"\u003e这个页面\u003c/a\u003e中填写Repo名称\u003c/li\u003e\n\u003cli\u003e不要勾选Initialize this repository with a README\u003c/li\u003e\n\u003cli\u003e点击Create repository\u003c/li\u003e\n\u003cli\u003e在本地使用Git命令行工具进入到和第1步填写Repo相同名称的文件夹中（此文件夹中已包含你要push到Github上的内容），执行以下几个命令：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit init\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etouch README.md \u003cspan style=\"color:#75715e\"\u003e#optional\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit add .\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit commit -m \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;your comment\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit remote add origin https://github.com/UserName/RepoName\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit push origin master\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e如果你在第2步中勾选了Initialize this repository with a README，那么在第4步中省略touch README.md并且在git add .之前，执行第5行代码，然后git pull origin master将远端（remote）的内容pull到本地\u003c/li\u003e\n\u003cli\u003e关于Git命令中的fetch和pull的区别，请看\u003ca href=\"https://blog.csdn.net/wfdtxz/article/details/8632811\"\u003e这篇博文\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e关于Git bash和Github的连接，请看\u003ca href=\"https://www.cnblogs.com/fnng/archive/2011/08/25/2153807.html\"\u003e这篇博文\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"二git命令中fetch和pull的区别转载\"\u003e二、Git命令中fetch和pull的区别（\u003ca href=\"https://blog.csdn.net/wfdtxz/article/details/8632811\"\u003e转载\u003c/a\u003e）\u003c/h1\u003e\n\u003cp\u003eGit中从远程的分支获取最新的版本到本地有这样2个命令：\u003c/p\u003e","title":"Git相关笔记"}]